package com.crossover.techtrial.model;

import java.io.Serializable;
import java.time.LocalDate;
import java.time.LocalDateTime;

import javax.persistence.Column;
import javax.persistence.ColumnResult;
import javax.persistence.ConstructorResult;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.NamedNativeQuery;
import javax.persistence.SqlResultSetMapping;
import javax.persistence.Table;

import com.crossover.techtrial.dto.DailyElectricity;
import com.fasterxml.jackson.annotation.JsonIgnore;

/**
 * HourlyElectricity is responsible for electricity generated by a Panel in an
 * hour.
 * 
 * @author Crossover
 *
 */
@NamedNativeQuery(name = "HourlyElectricity.findAllDataFromSerialPanelByDay", query = "select sum(generated_electricity) as 'sum',"
		+ " min(generated_electricity) as 'min'," 
		+ " max(generated_electricity) as 'max',"
		+ " avg(generated_electricity) as 'average'," 
		+ " reading_at as 'date' "
		+ " from crosssolar.hourly_electricity inner join crosssolar.panel  where hourly_electricity.panel_id=panel.id and panel.serial=:panelSerial and reading_at<:currentDate group by DAY(reading_at) , MONTH(reading_at), YEAR(reading_at)", resultSetMapping = "avgDataSumaryMapping")

@SqlResultSetMapping(name = "avgDataSumaryMapping", classes = @ConstructorResult(targetClass = DailyElectricity.class, columns = {
		@ColumnResult(name = "sum", type = Long.class),
		@ColumnResult(name = "min", type = Long.class),
		@ColumnResult(name = "max", type = Long.class),
		@ColumnResult(name = "average", type = Double.class),
		@ColumnResult(name = "date", type = LocalDate.class) }))

@Entity
@Table(name = "hourly_electricity")
public class HourlyElectricity implements Serializable {

	private static final long serialVersionUID = -575347909928592140L;

	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	Long id;

	@JsonIgnore
	@ManyToOne
	@JoinColumn(name = "panel_id", referencedColumnName = "id")
	Panel panel;

	@Column(name = "generated_electricity")
	Long generatedElectricity;

	@Column(name = "reading_at")
	LocalDateTime readingAt;

	public Long getId() {
		return id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	public Panel getPanel() {
		return panel;
	}

	public void setPanel(Panel panel) {
		this.panel = panel;
	}

	public Long getGeneratedElectricity() {
		return generatedElectricity;
	}

	public void setGeneratedElectricity(Long generatedElectricity) {
		this.generatedElectricity = generatedElectricity;
	}

	public LocalDateTime getReadingAt() {
		return readingAt;
	}

	public void setReadingAt(LocalDateTime readingAt) {
		this.readingAt = readingAt;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((id == null) ? 0 : id.hashCode());
		result = prime * result + ((readingAt == null) ? 0 : readingAt.hashCode());
		return result;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}
		if (obj == null) {
			return false;
		}
		if (getClass() != obj.getClass()) {
			return false;
		}
		HourlyElectricity other = (HourlyElectricity) obj;
		if (id == null) {
			if (other.id != null) {
				return false;
			}
		} else if (!id.equals(other.id)) {
			return false;
		}
		if (readingAt == null) {
			if (other.readingAt != null) {
				return false;
			}
		} else if (!readingAt.equals(other.readingAt)) {
			return false;
		}
		return true;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return "HourlyElectricity [id=" + id + ", panel=" + panel + ", generatedElectricity=" + generatedElectricity
				+ ", readingAt=" + readingAt + "]";
	}

}
